// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketBooking.Api.DataContext;

#nullable disable

namespace TicketBooking.Api.Migrations
{
    [DbContext(typeof(TicketBookingDataContext))]
    [Migration("20221223212457_Seeddata")]
    partial class Seeddata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketBooking.Api.Entities.BookingDetails", b =>
                {
                    b.Property<Guid>("BookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassengerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassengerMobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassengerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ScheduleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("BookingID");

                    b.HasIndex("ScheduleID");

                    b.ToTable("BookingDetails");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.BookingSeatDetails", b =>
                {
                    b.Property<Guid>("SeatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BookingID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeatNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("SeatID");

                    b.HasIndex("BookingID");

                    b.ToTable("BookingSeatDetails");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.Bus", b =>
                {
                    b.Property<Guid>("BusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BusNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CoachID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TotalSeat")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("BusID");

                    b.HasIndex("CoachID");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.BusRoute", b =>
                {
                    b.Property<Guid>("RouteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoachID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FromCityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ToCityID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("RouteID");

                    b.HasIndex("CoachID");

                    b.HasIndex("FromCityID");

                    b.HasIndex("ToCityID");

                    b.ToTable("BusRoutes");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.BusSchedule", b =>
                {
                    b.Property<Guid>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BusID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RouteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ScheduleID");

                    b.HasIndex("BusID");

                    b.HasIndex("RouteID");

                    b.ToTable("BusSchedules");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.City", b =>
                {
                    b.Property<Guid>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CityID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityID = new Guid("2762cec3-4ff9-421e-8107-7000b866ab07"),
                            CityName = "Pune",
                            UpdateTime = new DateTime(2022, 12, 24, 2, 54, 56, 735, DateTimeKind.Local).AddTicks(8694)
                        },
                        new
                        {
                            CityID = new Guid("a0e62ab0-6af3-433e-9d65-13f9923bb1dd"),
                            CityName = "Banglore",
                            UpdateTime = new DateTime(2022, 12, 24, 2, 54, 56, 735, DateTimeKind.Local).AddTicks(8711)
                        },
                        new
                        {
                            CityID = new Guid("7a609501-e2fe-4de0-9bf6-b2c22c6646dd"),
                            CityName = "Surat",
                            UpdateTime = new DateTime(2022, 12, 24, 2, 54, 56, 735, DateTimeKind.Local).AddTicks(8715)
                        });
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.Coach", b =>
                {
                    b.Property<Guid>("CoachID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CoachName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CoachID");

                    b.ToTable("Coaches");

                    b.HasData(
                        new
                        {
                            CoachID = new Guid("5054bf39-5259-4e46-9d4c-047bb00707c1"),
                            CoachName = "AC",
                            UpdateTime = new DateTime(2022, 12, 24, 2, 54, 56, 735, DateTimeKind.Local).AddTicks(8960)
                        },
                        new
                        {
                            CoachID = new Guid("5fb09668-41b5-4886-9f58-8248f530119f"),
                            CoachName = "Non-AC",
                            UpdateTime = new DateTime(2022, 12, 24, 2, 54, 56, 735, DateTimeKind.Local).AddTicks(8964)
                        });
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            ID = new Guid("ef77dfc4-ceda-4f97-ce98-11dae1f1f94c"),
                            Name = "reader"
                        },
                        new
                        {
                            ID = new Guid("16820d32-1f50-4d99-ce9a-12dae1f1f94c"),
                            Name = "writter"
                        });
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("787bbf44-d8a6-4eeb-297a-08dae2067a33"),
                            EmailAddress = "readwrite@user.com",
                            FirstName = "Read Write",
                            LastName = "User",
                            Password = "readwrite@user",
                            UserName = "readwrite@user.com"
                        },
                        new
                        {
                            UserID = new Guid("d31d6cb7-36d2-4434-2f49-08dae211c0ab"),
                            EmailAddress = "radonly@user.com",
                            FirstName = "Read Only",
                            LastName = "User",
                            Password = "radonly@user",
                            UserName = "radonly@user.com"
                        });
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.User_Role", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("User_Roles");

                    b.HasData(
                        new
                        {
                            ID = new Guid("787bbf44-d8a6-4eeb-297a-08dae1111a33"),
                            RoleID = new Guid("16820d32-1f50-4d99-ce9a-12dae1f1f94c"),
                            UserID = new Guid("787bbf44-d8a6-4eeb-297a-08dae2067a33")
                        },
                        new
                        {
                            ID = new Guid("706cdede-d481-4e2f-ce11-08dae1f1f94c"),
                            RoleID = new Guid("ef77dfc4-ceda-4f97-ce98-11dae1f1f94c"),
                            UserID = new Guid("787bbf44-d8a6-4eeb-297a-08dae2067a33")
                        },
                        new
                        {
                            ID = new Guid("693575b0-7639-1010-f2b0-08dae1f58abf"),
                            RoleID = new Guid("ef77dfc4-ceda-4f97-ce98-11dae1f1f94c"),
                            UserID = new Guid("d31d6cb7-36d2-4434-2f49-08dae211c0ab")
                        });
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.BookingDetails", b =>
                {
                    b.HasOne("TicketBooking.Api.Entities.BusSchedule", "BusSchedule")
                        .WithMany("BookingDetails")
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BusSchedule");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.BookingSeatDetails", b =>
                {
                    b.HasOne("TicketBooking.Api.Entities.BookingDetails", "BookingDetails")
                        .WithMany("BookingSeatDetails")
                        .HasForeignKey("BookingID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.Bus", b =>
                {
                    b.HasOne("TicketBooking.Api.Entities.Coach", "Coach")
                        .WithMany("Buses")
                        .HasForeignKey("CoachID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.BusRoute", b =>
                {
                    b.HasOne("TicketBooking.Api.Entities.Coach", "Coach")
                        .WithMany("BusRoutes")
                        .HasForeignKey("CoachID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TicketBooking.Api.Entities.City", "FromCity")
                        .WithMany("FromBusRoutes")
                        .HasForeignKey("FromCityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketBooking.Api.Entities.City", "ToCity")
                        .WithMany("ToBusRoutes")
                        .HasForeignKey("ToCityID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Coach");

                    b.Navigation("FromCity");

                    b.Navigation("ToCity");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.BusSchedule", b =>
                {
                    b.HasOne("TicketBooking.Api.Entities.Bus", "Bus")
                        .WithMany("BusSchedules")
                        .HasForeignKey("BusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TicketBooking.Api.Entities.BusRoute", "BusRoute")
                        .WithMany("BusSchedules")
                        .HasForeignKey("RouteID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Bus");

                    b.Navigation("BusRoute");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.User_Role", b =>
                {
                    b.HasOne("TicketBooking.Api.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketBooking.Api.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.BookingDetails", b =>
                {
                    b.Navigation("BookingSeatDetails");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.Bus", b =>
                {
                    b.Navigation("BusSchedules");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.BusRoute", b =>
                {
                    b.Navigation("BusSchedules");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.BusSchedule", b =>
                {
                    b.Navigation("BookingDetails");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.City", b =>
                {
                    b.Navigation("FromBusRoutes");

                    b.Navigation("ToBusRoutes");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.Coach", b =>
                {
                    b.Navigation("BusRoutes");

                    b.Navigation("Buses");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("TicketBooking.Api.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
